/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2020-01-05 12:20:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.item;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import item.model.vo.ItemImage;
import java.util.Map;
import item.model.vo.Item;
import java.util.List;
import java.text.DecimalFormat;

public final class itemListNoCategoryAjax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("item.model.vo.ItemImage");
    _jspx_imports_classes.add("item.model.vo.Item");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.text.DecimalFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String search = (String)request.getAttribute("search");
	List<Item> itemList = (List<Item>)request.getAttribute("itemList");
	List<Integer> itemNoList = (List<Integer>)request.getAttribute("itemNoList");
	Map<Integer, List<ItemImage>> imgMap = (Map<Integer, List<ItemImage>>)request.getAttribute("imgMap");
	String pageBar = (String)request.getAttribute("pageBar");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"row item-list\">\r\n");

if(!itemList.isEmpty()) {
	for(int i=0; i<itemList.size(); i++){
		Item item = itemList.get(i);
		List<ItemImage> imgList = imgMap.get(itemNoList.get(i));
		
		//원화 콤마찍기
		int discountedPrice = (int)Math.ceil((item.getItemPrice()*0.95)/14)/100*100; //14일기준
		DecimalFormat dc = new DecimalFormat("###,###,###,###원");
		String dP = dc.format(discountedPrice);

      out.write("\r\n");
      out.write("\t<div class=\"col-md-3\">\r\n");
      out.write("\t    <a href=\"");
      out.print(request.getContextPath());
      out.write("/item/itemView?search=");
      out.print(item.getCategoryNo());
      out.write("&itemNo=");
      out.print(item.getItemNo());
      out.write("\" class=\"center-block\">\r\n");
      out.write("\t        <img src=\"");
      out.print(request.getContextPath());
      out.write("/images/");
      out.print(item.getCategoryNo());
      out.write('/');
      out.print(imgList.get(0).getItemImageDefault());
      out.write("\" alt=\"item\" class=\"center-block\">\r\n");
      out.write("\t        <div class=\"ptext-wrapper\">\r\n");
      out.write("\t            <p class=\"pbrand\">");
      out.print(item.getItemBrand() );
      out.write("</p>\r\n");
      out.write("\t            <p class=\"pname\">");
      out.print(item.getItemName() );
      out.write("</p>\r\n");
      out.write("\t            <div class=\"price-wrapper\">\r\n");
      out.write("\t                <p class=\"price\">");
      out.print(dP );
      out.write("/<span class=\"rent-period\"> 14일</span></p>\r\n");
      out.write("\t                <p class=\"rent-type\">일시납</p>\r\n");
      out.write("\t            </div>\r\n");
      out.write("\t        </div>\r\n");
      out.write("\t    </a>\r\n");
      out.write("\t</div>\r\n");

	}
	//상품개수가 4의 배수가 아니면 부족한 만큼 빈 박스로 채움
	if(itemList.size()%4!=0){
		int plus = 4 - (itemList.size()%4);
		for(int i=0; i<plus; i++){

      out.write("\r\n");
      out.write("\t<div class=\"col-md-3\"></div>\r\n");

		}
	}

      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 페이징바 -->\r\n");
      out.write("<nav class=\"paging-bar text-center\">\r\n");
      out.write("    <ol class=\"list-unstyled list-inline\">\r\n");
      out.write("    \t");
      out.print(pageBar );
      out.write("\r\n");
      out.write("    </ol>\r\n");
      out.write("</nav>\r\n");

	}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
